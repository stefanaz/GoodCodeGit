//
// File generated by rootcint at Fri Oct 24 10:58:01 2014

// Do NOT change. Changes will be lost next time file is generated
//

#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "GMVDDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void GMVD_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_GMVD(void *p = 0);
   static void *newArray_GMVD(Long_t size, void *p);
   static void delete_GMVD(void *p);
   static void deleteArray_GMVD(void *p);
   static void destruct_GMVD(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::GMVD*)
   {
      ::GMVD *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::GMVD >(0);
      static ::ROOT::TGenericClassInfo 
         instance("GMVD", ::GMVD::Class_Version(), "/data/zenith234d/stefan/GoodCodeGit/libraries/GutLib/inc//GMVD.h", 18,
                  typeid(::GMVD), DefineBehavior(ptr, ptr),
                  &::GMVD::Dictionary, isa_proxy, 0,
                  sizeof(::GMVD) );
      instance.SetNew(&new_GMVD);
      instance.SetNewArray(&newArray_GMVD);
      instance.SetDelete(&delete_GMVD);
      instance.SetDeleteArray(&deleteArray_GMVD);
      instance.SetDestructor(&destruct_GMVD);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::GMVD*)
   {
      return GenerateInitInstanceLocal((::GMVD*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::GMVD*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *GMVD::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *GMVD::Class_Name()
{
   return "GMVD";
}

//______________________________________________________________________________
const char *GMVD::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::GMVD*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int GMVD::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::GMVD*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void GMVD::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::GMVD*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *GMVD::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::GMVD*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void GMVD::Streamer(TBuffer &R__b)
{
   // Stream an object of class GMVD.

   GPhysObj::Streamer(R__b);
}

//______________________________________________________________________________
void GMVD::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class GMVD.
      TClass *R__cl = ::GMVD::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*fControlX_uncut", &fControlX_uncut);
      R__insp.Inspect(R__cl, R__parent, "*fControlY_uncut", &fControlY_uncut);
      R__insp.Inspect(R__cl, R__parent, "*fControlZ_uncut", &fControlZ_uncut);
      R__insp.Inspect(R__cl, R__parent, "*fControlX_without_muon_uncut", &fControlX_without_muon_uncut);
      R__insp.Inspect(R__cl, R__parent, "*fControlY_without_muon_uncut", &fControlY_without_muon_uncut);
      R__insp.Inspect(R__cl, R__parent, "*fControlZ_without_muon_uncut", &fControlZ_without_muon_uncut);
      R__insp.Inspect(R__cl, R__parent, "*fControlX", &fControlX);
      R__insp.Inspect(R__cl, R__parent, "*fControlY", &fControlY);
      R__insp.Inspect(R__cl, R__parent, "*fControlZ", &fControlZ);
      R__insp.Inspect(R__cl, R__parent, "*fControlX_without_muon", &fControlX_without_muon);
      R__insp.Inspect(R__cl, R__parent, "*fControlY_without_muon", &fControlY_without_muon);
      R__insp.Inspect(R__cl, R__parent, "*fControlZ_without_muon", &fControlZ_without_muon);
      R__insp.Inspect(R__cl, R__parent, "*fGeneralX_uncut", &fGeneralX_uncut);
      R__insp.Inspect(R__cl, R__parent, "*fGeneralY_uncut", &fGeneralY_uncut);
      R__insp.Inspect(R__cl, R__parent, "*fGeneralZ_uncut", &fGeneralZ_uncut);
      R__insp.Inspect(R__cl, R__parent, "*fGeneralX_without_muon_uncut", &fGeneralX_without_muon_uncut);
      R__insp.Inspect(R__cl, R__parent, "*fGeneralY_without_muon_uncut", &fGeneralY_without_muon_uncut);
      R__insp.Inspect(R__cl, R__parent, "*fGeneralZ_without_muon_uncut", &fGeneralZ_without_muon_uncut);
      R__insp.Inspect(R__cl, R__parent, "*fGeneralX", &fGeneralX);
      R__insp.Inspect(R__cl, R__parent, "*fGeneralY", &fGeneralY);
      R__insp.Inspect(R__cl, R__parent, "*fGeneralZ", &fGeneralZ);
      R__insp.Inspect(R__cl, R__parent, "*fGeneralX_without_muon", &fGeneralX_without_muon);
      R__insp.Inspect(R__cl, R__parent, "*fGeneralY_without_muon", &fGeneralY_without_muon);
      R__insp.Inspect(R__cl, R__parent, "*fGeneralZ_without_muon", &fGeneralZ_without_muon);
      R__insp.Inspect(R__cl, R__parent, "fX", &fX);
      R__insp.Inspect(R__cl, R__parent, "fY", &fY);
      R__insp.Inspect(R__cl, R__parent, "fZ", &fZ);
      R__insp.Inspect(R__cl, R__parent, "fX_without_muon", &fX_without_muon);
      R__insp.Inspect(R__cl, R__parent, "fY_without_muon", &fY_without_muon);
      R__insp.Inspect(R__cl, R__parent, "fZ_without_muon", &fZ_without_muon);
      R__insp.Inspect(R__cl, R__parent, "fAllCuts", &fAllCuts);
      GPhysObj::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_GMVD(void *p) {
      return  p ? new(p) ::GMVD : new ::GMVD;
   }
   static void *newArray_GMVD(Long_t nElements, void *p) {
      return p ? new(p) ::GMVD[nElements] : new ::GMVD[nElements];
   }
   // Wrapper around operator delete
   static void delete_GMVD(void *p) {
      delete ((::GMVD*)p);
   }
   static void deleteArray_GMVD(void *p) {
      delete [] ((::GMVD*)p);
   }
   static void destruct_GMVD(void *p) {
      typedef ::GMVD current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::GMVD

/********************************************************
* /data/zenith234d/stefan/GoodCodeGit/libraries/GutLib/dict/GMVDDict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableGMVDDict();

extern "C" void G__set_cpp_environmentGMVDDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("/data/zenith234d/stefan/GoodCodeGit/libraries/GutLib/inc//GMVD.h");
  G__cpp_reset_tagtableGMVDDict();
}
#include <new>
extern "C" int G__cpp_dllrevGMVDDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* GMVD */
static int G__GMVDDict_164_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GMVD* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new GMVD[n];
     } else {
       p = new((void*) gvp) GMVD[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new GMVD;
     } else {
       p = new((void*) gvp) GMVD;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GMVDDictLN_GMVD));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GMVDDict_164_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((GMVD*) G__getstructoffset())->MakeZTTVertex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GMVDDict_164_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((GMVD*) G__getstructoffset())->MakeZTTVertexWithoutMuon());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GMVDDict_164_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) GMVD::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GMVDDict_164_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GMVD::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GMVDDict_164_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) GMVD::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GMVDDict_164_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      GMVD::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GMVDDict_164_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GMVD*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GMVDDict_164_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GMVD::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GMVDDict_164_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) GMVD::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GMVDDict_164_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GMVD::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GMVDDict_164_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) GMVD::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GMVDDict_164_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   GMVD* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new GMVD(*(GMVD*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GMVDDictLN_GMVD));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef GMVD G__TGMVD;
static int G__GMVDDict_164_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (GMVD*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((GMVD*) (soff+(sizeof(GMVD)*i)))->~G__TGMVD();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (GMVD*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((GMVD*) (soff))->~G__TGMVD();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GMVDDict_164_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GMVD* dest = (GMVD*) G__getstructoffset();
   *dest = *(GMVD*) libp->para[0].ref;
   const GMVD& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* GMVD */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncGMVDDict {
 public:
  G__Sizep2memfuncGMVDDict(): p(&G__Sizep2memfuncGMVDDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncGMVDDict::*p)();
};

size_t G__get_sizep2memfuncGMVDDict()
{
  G__Sizep2memfuncGMVDDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceGMVDDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GMVDDictLN_GMVD))) {
     GMVD *G__Lderived;
     G__Lderived=(GMVD*)0x1000;
     {
       GPhysObj *G__Lpbase=(GPhysObj*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GMVDDictLN_GMVD),G__get_linked_tagnum(&G__GMVDDictLN_GPhysObj),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GMVDDictLN_GMVD),G__get_linked_tagnum(&G__GMVDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableGMVDDict() {

   /* Setting up typedef entry */
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<TSchemaHelper>",117,G__get_linked_tagnum(&G__GMVDDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__GMVDDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GMVDDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__GMVDDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GMVDDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__GMVDDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* GMVD */
static void G__setup_memvarGMVD(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GMVDDictLN_GMVD));
   { GMVD *p; p=(GMVD*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GMVDDictLN_TH1D),-1,-1,4,"fControlX_uncut=",0,"uncut x from vertex generated from good ztt-tracks");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GMVDDictLN_TH1D),-1,-1,4,"fControlY_uncut=",0,"uncut y from vertex generated from good ztt-tracks");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GMVDDictLN_TH1D),-1,-1,4,"fControlZ_uncut=",0,"uncut z from vertex generated from good ztt-tracks");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GMVDDictLN_TH1D),-1,-1,4,"fControlX_without_muon_uncut=",0,"uncut x from vertex generated from good ztt-tracks without the chosen muon");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GMVDDictLN_TH1D),-1,-1,4,"fControlY_without_muon_uncut=",0,"uncut y from vertex generated from good ztt-tracks without the chosen muon");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GMVDDictLN_TH1D),-1,-1,4,"fControlZ_without_muon_uncut=",0,"uncut z from vertex generated from good ztt-tracks without the chosen muon");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GMVDDictLN_TH1D),-1,-1,4,"fControlX=",0,"x from vertex generated from good ztt-tracks");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GMVDDictLN_TH1D),-1,-1,4,"fControlY=",0,"y from vertex generated from good ztt-tracks");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GMVDDictLN_TH1D),-1,-1,4,"fControlZ=",0,"z from vertex generated from good ztt-tracks");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GMVDDictLN_TH1D),-1,-1,4,"fControlX_without_muon=",0,"x from vertex generated from good ztt-tracks without the chosen muon");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GMVDDictLN_TH1D),-1,-1,4,"fControlY_without_muon=",0,"y from vertex generated from good ztt-tracks without the chosen muon");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GMVDDictLN_TH1D),-1,-1,4,"fControlZ_without_muon=",0,"z from vertex generated from good ztt-tracks without the chosen muon");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GMVDDictLN_TH1D),-1,-1,4,"fGeneralX_uncut=",0,"uncut x from vertex generated from good ztt-tracks");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GMVDDictLN_TH1D),-1,-1,4,"fGeneralY_uncut=",0,"uncut y from vertex generated from good ztt-tracks");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GMVDDictLN_TH1D),-1,-1,4,"fGeneralZ_uncut=",0,"uncut z from vertex generated from good ztt-tracks");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GMVDDictLN_TH1D),-1,-1,4,"fGeneralX_without_muon_uncut=",0,"uncut x from vertex generated from good ztt-tracks without the chosen muon");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GMVDDictLN_TH1D),-1,-1,4,"fGeneralY_without_muon_uncut=",0,"uncut y from vertex generated from good ztt-tracks without the chosen muon");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GMVDDictLN_TH1D),-1,-1,4,"fGeneralZ_without_muon_uncut=",0,"uncut z from vertex generated from good ztt-tracks without the chosen muon");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GMVDDictLN_TH1D),-1,-1,4,"fGeneralX=",0,"x from vertex generated from good ztt-tracks");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GMVDDictLN_TH1D),-1,-1,4,"fGeneralY=",0,"y from vertex generated from good ztt-tracks");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GMVDDictLN_TH1D),-1,-1,4,"fGeneralZ=",0,"z from vertex generated from good ztt-tracks");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GMVDDictLN_TH1D),-1,-1,4,"fGeneralX_without_muon=",0,"x from vertex generated from good ztt-tracks without the chosen muon");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GMVDDictLN_TH1D),-1,-1,4,"fGeneralY_without_muon=",0,"y from vertex generated from good ztt-tracks without the chosen muon");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GMVDDictLN_TH1D),-1,-1,4,"fGeneralZ_without_muon=",0,"z from vertex generated from good ztt-tracks without the chosen muon");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fX=",0,"x from vertex generated from good ztt-tracks");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fY=",0,"y from vertex generated from good ztt-tracks");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fZ=",0,"z from vertex generated from good ztt-tracks");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fX_without_muon=",0,"x from vertex generated from good ztt-tracks without chosen muon");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fY_without_muon=",0,"y from vertex generated from good ztt-tracks without chosen muon");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fZ_without_muon=",0,"z from vertex generated from good ztt-tracks without chosen muon");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fAllCuts=",0,"flag for passing all MVD cuts");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GMVDDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarGMVDDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncGMVD(void) {
   /* GMVD */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GMVDDictLN_GMVD));
   G__memfunc_setup("GMVD",302,G__GMVDDict_164_0_1, 105, G__get_linked_tagnum(&G__GMVDDictLN_GMVD), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateHistograms",1653,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CreateGeneral",1298,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CreateControl",1333,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Reset",515,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FillHistos",1025,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FillGeneral",1093,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FillControl",1128,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Do",179,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MakeZTTVertex",1278,G__GMVDDict_164_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MakeZTTVertexWithoutMuon",2449,G__GMVDDict_164_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finalize",818,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetAllCuts",984,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PrintMessage",1234,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__GMVDDictLN_TString), -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'TString' - 0 - option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsOK",342,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__GMVDDict_164_0_17, 85, G__get_linked_tagnum(&G__GMVDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&GMVD::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GMVDDict_164_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GMVD::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GMVDDict_164_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&GMVD::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GMVDDict_164_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&GMVD::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GMVDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GMVDDict_164_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GMVDDict_164_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GMVD::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GMVDDict_164_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&GMVD::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GMVDDict_164_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GMVD::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GMVDDict_164_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&GMVD::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("GMVD", 302, G__GMVDDict_164_0_29, (int) ('i'), G__get_linked_tagnum(&G__GMVDDictLN_GMVD), -1, 0, 1, 1, 1, 0, "u 'GMVD' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~GMVD", 428, G__GMVDDict_164_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GMVDDict_164_0_31, (int) ('u'), G__get_linked_tagnum(&G__GMVDDictLN_GMVD), -1, 1, 1, 1, 1, 0, "u 'GMVD' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncGMVDDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalGMVDDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcGMVDDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__GMVDDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__GMVDDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__GMVDDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__GMVDDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__GMVDDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__GMVDDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__GMVDDictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__GMVDDictLN_TH1D = { "TH1D" , 99 , -1 };
G__linked_taginfo G__GMVDDictLN_GPhysObj = { "GPhysObj" , 99 , -1 };
G__linked_taginfo G__GMVDDictLN_GMVD = { "GMVD" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableGMVDDict() {
  G__GMVDDictLN_TClass.tagnum = -1 ;
  G__GMVDDictLN_TBuffer.tagnum = -1 ;
  G__GMVDDictLN_TMemberInspector.tagnum = -1 ;
  G__GMVDDictLN_TObject.tagnum = -1 ;
  G__GMVDDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__GMVDDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__GMVDDictLN_TString.tagnum = -1 ;
  G__GMVDDictLN_TH1D.tagnum = -1 ;
  G__GMVDDictLN_GPhysObj.tagnum = -1 ;
  G__GMVDDictLN_GMVD.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableGMVDDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__GMVDDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__GMVDDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__GMVDDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__GMVDDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__GMVDDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__GMVDDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__GMVDDictLN_TString);
   G__get_linked_tagnum_fwd(&G__GMVDDictLN_TH1D);
   G__get_linked_tagnum_fwd(&G__GMVDDictLN_GPhysObj);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GMVDDictLN_GMVD),sizeof(GMVD),-1,29952,"class which deals with special MVD functionality",G__setup_memvarGMVD,G__setup_memfuncGMVD);
}
extern "C" void G__cpp_setupGMVDDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupGMVDDict()");
  G__set_cpp_environmentGMVDDict();
  G__cpp_setup_tagtableGMVDDict();

  G__cpp_setup_inheritanceGMVDDict();

  G__cpp_setup_typetableGMVDDict();

  G__cpp_setup_memvarGMVDDict();

  G__cpp_setup_memfuncGMVDDict();
  G__cpp_setup_globalGMVDDict();
  G__cpp_setup_funcGMVDDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncGMVDDict();
  return;
}
class G__cpp_setup_initGMVDDict {
  public:
    G__cpp_setup_initGMVDDict() { G__add_setup_func("GMVDDict",(G__incsetup)(&G__cpp_setupGMVDDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initGMVDDict() { G__remove_setup_func("GMVDDict"); }
};
G__cpp_setup_initGMVDDict G__cpp_setup_initializerGMVDDict;

