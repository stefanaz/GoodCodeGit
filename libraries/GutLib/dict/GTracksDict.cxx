//
// File generated by rootcint at Fri Oct 24 10:58:04 2014

// Do NOT change. Changes will be lost next time file is generated
//

#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "GTracksDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void GTracks_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_GTracks(void *p = 0);
   static void *newArray_GTracks(Long_t size, void *p);
   static void delete_GTracks(void *p);
   static void deleteArray_GTracks(void *p);
   static void destruct_GTracks(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::GTracks*)
   {
      ::GTracks *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::GTracks >(0);
      static ::ROOT::TGenericClassInfo 
         instance("GTracks", ::GTracks::Class_Version(), "/data/zenith234d/stefan/GoodCodeGit/libraries/GutLib/inc//GTracks.h", 22,
                  typeid(::GTracks), DefineBehavior(ptr, ptr),
                  &::GTracks::Dictionary, isa_proxy, 0,
                  sizeof(::GTracks) );
      instance.SetNew(&new_GTracks);
      instance.SetNewArray(&newArray_GTracks);
      instance.SetDelete(&delete_GTracks);
      instance.SetDeleteArray(&deleteArray_GTracks);
      instance.SetDestructor(&destruct_GTracks);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::GTracks*)
   {
      return GenerateInitInstanceLocal((::GTracks*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::GTracks*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *GTracks::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *GTracks::Class_Name()
{
   return "GTracks";
}

//______________________________________________________________________________
const char *GTracks::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::GTracks*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int GTracks::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::GTracks*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void GTracks::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::GTracks*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *GTracks::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::GTracks*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void GTracks::Streamer(TBuffer &R__b)
{
   // Stream an object of class GTracks.

   GPhysObj::Streamer(R__b);
}

//______________________________________________________________________________
void GTracks::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class GTracks.
      TClass *R__cl = ::GTracks::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fMultiplicityCut", &fMultiplicityCut);
      R__insp.Inspect(R__cl, R__parent, "fVertexCut", &fVertexCut);
      R__insp.Inspect(R__cl, R__parent, "fMinVertexCut", &fMinVertexCut);
      R__insp.Inspect(R__cl, R__parent, "fTotalOvVertexCut", &fTotalOvVertexCut);
      R__insp.Inspect(R__cl, R__parent, "*fTracks", &fTracks);
      R__insp.Inspect(R__cl, R__parent, "fNTracks", &fNTracks);
      R__insp.Inspect(R__cl, R__parent, "fNCTDTracks", &fNCTDTracks);
      R__insp.Inspect(R__cl, R__parent, "fNREGTracks", &fNREGTracks);
      R__insp.Inspect(R__cl, R__parent, "fNZTTTracks", &fNZTTTracks);
      R__insp.Inspect(R__cl, R__parent, "fNVertexTracks", &fNVertexTracks);
      R__insp.Inspect(R__cl, R__parent, "fFakeEventWeight", &fFakeEventWeight);
      R__insp.Inspect(R__cl, R__parent, "fFakeID", &fFakeID);
      R__insp.Inspect(R__cl, R__parent, "*fGeneralN", &fGeneralN);
      R__insp.Inspect(R__cl, R__parent, "*fGeneralN_uncut", &fGeneralN_uncut);
      R__insp.Inspect(R__cl, R__parent, "*fGeneralNVertex", &fGeneralNVertex);
      R__insp.Inspect(R__cl, R__parent, "*fGeneralNVertex_uncut", &fGeneralNVertex_uncut);
      R__insp.Inspect(R__cl, R__parent, "*fGeneralNTotalOvVertex", &fGeneralNTotalOvVertex);
      R__insp.Inspect(R__cl, R__parent, "*fGeneralNTotalOvVertex_uncut", &fGeneralNTotalOvVertex_uncut);
      R__insp.Inspect(R__cl, R__parent, "*fTrackAllPt", &fTrackAllPt);
      R__insp.Inspect(R__cl, R__parent, "*fTrackAllEta_lowPt", &fTrackAllEta_lowPt);
      R__insp.Inspect(R__cl, R__parent, "*fTrackAllPhi_lowPt", &fTrackAllPhi_lowPt);
      R__insp.Inspect(R__cl, R__parent, "*fTrackAllEta_highPt", &fTrackAllEta_highPt);
      R__insp.Inspect(R__cl, R__parent, "*fTrackAllPhi_highPt", &fTrackAllPhi_highPt);
      R__insp.Inspect(R__cl, R__parent, "*fTrack2DAll_PtEta", &fTrack2DAll_PtEta);
      R__insp.Inspect(R__cl, R__parent, "*fTrackAllPt_fake", &fTrackAllPt_fake);
      R__insp.Inspect(R__cl, R__parent, "*fTrackAllEta_lowPt_fake", &fTrackAllEta_lowPt_fake);
      R__insp.Inspect(R__cl, R__parent, "*fTrackAllPhi_lowPt_fake", &fTrackAllPhi_lowPt_fake);
      R__insp.Inspect(R__cl, R__parent, "*fTrackAllEta_highPt_fake", &fTrackAllEta_highPt_fake);
      R__insp.Inspect(R__cl, R__parent, "*fTrackAllPhi_highPt_fake", &fTrackAllPhi_highPt_fake);
      R__insp.Inspect(R__cl, R__parent, "*fTrack2DAll_PtEta_fake", &fTrack2DAll_PtEta_fake);
      R__insp.Inspect(R__cl, R__parent, "*fTrack2DAll_PtEta_fake_diff", &fTrack2DAll_PtEta_fake_diff);
      R__insp.Inspect(R__cl, R__parent, "*fFakeWeight_hist", &fFakeWeight_hist);
      R__insp.Inspect(R__cl, R__parent, "*fFile", &fFile);
      R__insp.Inspect(R__cl, R__parent, "*fControlN", &fControlN);
      R__insp.Inspect(R__cl, R__parent, "*fControlN_uncut", &fControlN_uncut);
      R__insp.Inspect(R__cl, R__parent, "*fControlNVertex", &fControlNVertex);
      R__insp.Inspect(R__cl, R__parent, "*fControlNVertex_uncut", &fControlNVertex_uncut);
      R__insp.Inspect(R__cl, R__parent, "*fControlNTotalOvVertex", &fControlNTotalOvVertex);
      R__insp.Inspect(R__cl, R__parent, "*fControlNTotalOvVertex_uncut", &fControlNTotalOvVertex_uncut);
      R__insp.Inspect(R__cl, R__parent, "*fControlRandomNumber", &fControlRandomNumber);
      GPhysObj::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_GTracks(void *p) {
      return  p ? new(p) ::GTracks : new ::GTracks;
   }
   static void *newArray_GTracks(Long_t nElements, void *p) {
      return p ? new(p) ::GTracks[nElements] : new ::GTracks[nElements];
   }
   // Wrapper around operator delete
   static void delete_GTracks(void *p) {
      delete ((::GTracks*)p);
   }
   static void deleteArray_GTracks(void *p) {
      delete [] ((::GTracks*)p);
   }
   static void destruct_GTracks(void *p) {
      typedef ::GTracks current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::GTracks

/********************************************************
* /data/zenith234d/stefan/GoodCodeGit/libraries/GutLib/dict/GTracksDict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableGTracksDict();

extern "C" void G__set_cpp_environmentGTracksDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("/data/zenith234d/stefan/GoodCodeGit/libraries/GutLib/inc//GTracks.h");
  G__cpp_reset_tagtableGTracksDict();
}
#include <new>
extern "C" int G__cpp_dllrevGTracksDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* GTracks */
static int G__GTracksDict_177_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GTracks* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new GTracks[n];
     } else {
       p = new((void*) gvp) GTracks[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new GTracks;
     } else {
       p = new((void*) gvp) GTracks;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GTracksDictLN_GTracks));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GTracksDict_177_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((GTracks*) G__getstructoffset())->Fill());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GTracksDict_177_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((GTracks*) G__getstructoffset())->ObjectsFillHistos());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GTracksDict_177_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((GTracks*) G__getstructoffset())->ObjectsFillGeneral((GTrack*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GTracksDict_177_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((GTracks*) G__getstructoffset())->GetTrack((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GTracksDict_177_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((GTracks*) G__getstructoffset())->GetTrackByID((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GTracksDict_177_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((GTracks*) G__getstructoffset())->GetNormalTrackByVCTRHLID((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GTracksDict_177_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((GTracks*) G__getstructoffset())->GetZTTTrackByVCTRHLID((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GTracksDict_177_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((GTracks*) G__getstructoffset())->GetNTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GTracksDict_177_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((GTracks*) G__getstructoffset())->CheckUsedSuperLayersCut((GTrack*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GTracksDict_177_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((GTracks*) G__getstructoffset())->CheckUsedHitsCut((GTrack*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GTracksDict_177_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((GTracks*) G__getstructoffset())->CheckUsedStereoHitsCut((GTrack*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GTracksDict_177_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((GTracks*) G__getstructoffset())->CheckZHCut((GTrack*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GTracksDict_177_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((GTracks*) G__getstructoffset())->CheckMVDHitsCut((GTrack*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GTracksDict_177_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((GTracks*) G__getstructoffset())->CheckAllCuts((GTrack*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GTracksDict_177_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((GTracks*) G__getstructoffset())->CheckMultiplicityCut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GTracksDict_177_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((GTracks*) G__getstructoffset())->CheckVertexCut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GTracksDict_177_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((GTracks*) G__getstructoffset())->CheckMinVertexCut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GTracksDict_177_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((GTracks*) G__getstructoffset())->CheckTotalOvVertexCut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GTracksDict_177_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((GTracks*) G__getstructoffset())->CheckFakeBackground((GTrack*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GTracksDict_177_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((GTracks*) G__getstructoffset())->ReadInHistogram((char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GTracksDict_177_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((GTracks*) G__getstructoffset())->ChooseFakeMuCand());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GTracksDict_177_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((GTracks*) G__getstructoffset())->GetFakeMuCand());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GTracksDict_177_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((GTracks*) G__getstructoffset())->GetMultiplicityCut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GTracksDict_177_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((GTracks*) G__getstructoffset())->GetVertexCut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GTracksDict_177_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((GTracks*) G__getstructoffset())->GetMinVertexCut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GTracksDict_177_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((GTracks*) G__getstructoffset())->GetTotalOvVertexCut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GTracksDict_177_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((GTracks*) G__getstructoffset())->GetFakeEventWeight());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GTracksDict_177_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((GTracks*) G__getstructoffset())->GetTrackPt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GTracksDict_177_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((GTracks*) G__getstructoffset())->GetTrackEta_lowPt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GTracksDict_177_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((GTracks*) G__getstructoffset())->GetTrackPhi_lowPt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GTracksDict_177_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((GTracks*) G__getstructoffset())->GetTrackEta_highPt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GTracksDict_177_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((GTracks*) G__getstructoffset())->GetTrackPhi_highPt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GTracksDict_177_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((GTracks*) G__getstructoffset())->GetTrack2DAll_PtEta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GTracksDict_177_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((GTracks*) G__getstructoffset())->GetTrack2DAll_PtEta_fake());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GTracksDict_177_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) GTracks::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GTracksDict_177_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GTracks::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GTracksDict_177_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) GTracks::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GTracksDict_177_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      GTracks::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GTracksDict_177_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GTracks*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GTracksDict_177_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GTracks::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GTracksDict_177_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) GTracks::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GTracksDict_177_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GTracks::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GTracksDict_177_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) GTracks::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GTracksDict_177_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   GTracks* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new GTracks(*(GTracks*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GTracksDictLN_GTracks));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef GTracks G__TGTracks;
static int G__GTracksDict_177_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (GTracks*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((GTracks*) (soff+(sizeof(GTracks)*i)))->~G__TGTracks();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (GTracks*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((GTracks*) (soff))->~G__TGTracks();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GTracksDict_177_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GTracks* dest = (GTracks*) G__getstructoffset();
   *dest = *(GTracks*) libp->para[0].ref;
   const GTracks& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* GTracks */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncGTracksDict {
 public:
  G__Sizep2memfuncGTracksDict(): p(&G__Sizep2memfuncGTracksDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncGTracksDict::*p)();
};

size_t G__get_sizep2memfuncGTracksDict()
{
  G__Sizep2memfuncGTracksDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceGTracksDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GTracksDictLN_GTracks))) {
     GTracks *G__Lderived;
     G__Lderived=(GTracks*)0x1000;
     {
       GPhysObj *G__Lpbase=(GPhysObj*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GTracksDictLN_GTracks),G__get_linked_tagnum(&G__GTracksDictLN_GPhysObj),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GTracksDictLN_GTracks),G__get_linked_tagnum(&G__GTracksDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableGTracksDict() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<TSchemaHelper>",117,G__get_linked_tagnum(&G__GTracksDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__GTracksDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GTracksDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__GTracksDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GTracksDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__GTracksDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* GTracks */
static void G__setup_memvarGTracks(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GTracksDictLN_GTracks));
   { GTracks *p; p=(GTracks*)0x1000; if (p) { }
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fMultiplicityCut=",0,"flag for multiplicity cut");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fVertexCut=",0,"flag for cut on maximal vertex tracks");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fMinVertexCut=",0,"flag for cut on minimal vertex tracks");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fTotalOvVertexCut=",0,"flag for cut on total over vertex tracks");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GTracksDictLN_TClonesArray),-1,-1,4,"fTracks=",0,"track array");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNTracks=",0,"counter for tracks clonesarray");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNCTDTracks=",0,"counter for ctd only tracks");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNREGTracks=",0,"counter for regular tracks");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNZTTTracks=",0,"counter for ZTT tracks");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNVertexTracks=",0,"counter for vertex tracks");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fFakeEventWeight=",0,"sum of fake weights of all tracks");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fFakeID=",0,"trackID of chosen fake muon candidate");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GTracksDictLN_TH1D),-1,-1,4,"fGeneralN=",0,"number of tracks");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GTracksDictLN_TH1D),-1,-1,4,"fGeneralN_uncut=",0,"uncut number of tracks");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GTracksDictLN_TH1D),-1,-1,4,"fGeneralNVertex=",0,"number of vertex tracks");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GTracksDictLN_TH1D),-1,-1,4,"fGeneralNVertex_uncut=",0,"uncut number of vertex tracks");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GTracksDictLN_TH1D),-1,-1,4,"fGeneralNTotalOvVertex=",0,"total over vertex tracks");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GTracksDictLN_TH1D),-1,-1,4,"fGeneralNTotalOvVertex_uncut=",0,"uncut total over vertex tracks");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GTracksDictLN_TH1D),-1,-1,4,"fTrackAllPt=",0,"pt distribution of all tracks");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GTracksDictLN_TH1D),-1,-1,4,"fTrackAllEta_lowPt=",0,"eta track for pt 0.7<pt<1.5 GeV");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GTracksDictLN_TH1D),-1,-1,4,"fTrackAllPhi_lowPt=",0,"phi track for pt 0.7<pt<1.5 GeV");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GTracksDictLN_TH1D),-1,-1,4,"fTrackAllEta_highPt=",0,"eta track for pt > 1.5");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GTracksDictLN_TH1D),-1,-1,4,"fTrackAllPhi_highPt=",0,"phi track for pt > 1.5");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GTracksDictLN_TH2D),-1,-1,4,"fTrack2DAll_PtEta=",0,"pt vs eta all tracks ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GTracksDictLN_TH1D),-1,-1,4,"fTrackAllPt_fake=",0,"pt distribution of all tracks");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GTracksDictLN_TH1D),-1,-1,4,"fTrackAllEta_lowPt_fake=",0,"eta track weighted with fake for pt 0.7<pt<1.5 GeV");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GTracksDictLN_TH1D),-1,-1,4,"fTrackAllPhi_lowPt_fake=",0,"phi track weighted with fake for pt 0.7<pt<1.5 GeV");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GTracksDictLN_TH1D),-1,-1,4,"fTrackAllEta_highPt_fake=",0,"eta track for pt > 1.5");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GTracksDictLN_TH1D),-1,-1,4,"fTrackAllPhi_highPt_fake=",0,"phi track for pt > 1.5");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GTracksDictLN_TH2D),-1,-1,4,"fTrack2DAll_PtEta_fake=",0,"pt vs eta all tracks ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GTracksDictLN_TH2D),-1,-1,4,"fTrack2DAll_PtEta_fake_diff=",0,"pt vs eta all tracks deviation from original fake distribution (MuonAll_pteta - fTrack2DAll_PtEta_fake)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GTracksDictLN_TH2D),-1,-1,4,"fFakeWeight_hist=",0,"plot with fake weight/probabilities");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GTracksDictLN_TFile),-1,-1,4,"fFile=",0,"fake muon probability file");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GTracksDictLN_TH1D),-1,-1,4,"fControlN=",0,"control plot of number of tracks");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GTracksDictLN_TH1D),-1,-1,4,"fControlN_uncut=",0,"uncut control plot of number of tracks");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GTracksDictLN_TH1D),-1,-1,4,"fControlNVertex=",0,"control plot of number of vertex tracks");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GTracksDictLN_TH1D),-1,-1,4,"fControlNVertex_uncut=",0,"uncut control plot of number of vertex tracks");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GTracksDictLN_TH1D),-1,-1,4,"fControlNTotalOvVertex=",0,"total over vertex tracks");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GTracksDictLN_TH1D),-1,-1,4,"fControlNTotalOvVertex_uncut=",0,"uncut total over vertex tracks");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GTracksDictLN_TH1D),-1,-1,4,"fControlRandomNumber=",0,"random number generator");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GTracksDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarGTracksDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncGTracks(void) {
   /* GTracks */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GTracksDictLN_GTracks));
   G__memfunc_setup("GTracks",687,G__GTracksDict_177_0_1, 105, G__get_linked_tagnum(&G__GTracksDictLN_GTracks), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateControl",1333,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FillControl",1128,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CreateGeneral",1298,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FillGeneral",1093,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Reset",515,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Do",179,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Fill",391,G__GTracksDict_177_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FillHistos",1025,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ObjectsFillHistos",1739,G__GTracksDict_177_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ObjectsFillGeneral",1807,G__GTracksDict_177_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'GTrack' - 0 - track", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finalize",818,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrack",789,G__GTracksDict_177_0_13, 85, G__get_linked_tagnum(&G__GTracksDictLN_GTrack), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - index", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrackByID",1117,G__GTracksDict_177_0_14, 85, G__get_linked_tagnum(&G__GTracksDictLN_GTrack), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - index", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNormalTrackByVCTRHLID",2201,G__GTracksDict_177_0_15, 85, G__get_linked_tagnum(&G__GTracksDictLN_GTrack), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - vctrhl_id", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZTTTrackByVCTRHLID",1842,G__GTracksDict_177_0_16, 85, G__get_linked_tagnum(&G__GTracksDictLN_GTrack), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - vctrhl_id", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNTracks",982,G__GTracksDict_177_0_17, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CheckUsedSuperLayersCut",2330,G__GTracksDict_177_0_18, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'GTrack' - 0 - track", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CheckUsedHitsCut",1587,G__GTracksDict_177_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'GTrack' - 0 - track", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CheckUsedStereoHitsCut",2213,G__GTracksDict_177_0_20, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'GTrack' - 0 - track", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CheckZHCut",940,G__GTracksDict_177_0_21, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'GTrack' - 0 - track", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CheckMVDHitsCut",1417,G__GTracksDict_177_0_22, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'GTrack' - 0 - track", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CheckAllCuts",1174,G__GTracksDict_177_0_23, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'GTrack' - 0 - track", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CheckMultiplicityCut",2067,G__GTracksDict_177_0_24, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CheckVertexCut",1416,G__GTracksDict_177_0_25, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CheckMinVertexCut",1708,G__GTracksDict_177_0_26, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CheckTotalOvVertexCut",2129,G__GTracksDict_177_0_27, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CheckFakeBackground",1877,G__GTracksDict_177_0_28, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'GTrack' - 0 - track", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadInHistogram",1505,G__GTracksDict_177_0_29, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ChooseFakeMuCand",1552,G__GTracksDict_177_0_30, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetFakeMuCand",1231,G__GTracksDict_177_0_31, 85, G__get_linked_tagnum(&G__GTracksDictLN_GTrack), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMultiplicityCut",1877,G__GTracksDict_177_0_32, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetVertexCut",1226,G__GTracksDict_177_0_33, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMinVertexCut",1518,G__GTracksDict_177_0_34, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTotalOvVertexCut",1939,G__GTracksDict_177_0_35, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetFakeEventWeight",1793,G__GTracksDict_177_0_36, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrackPt",985,G__GTracksDict_177_0_37, 85, G__get_linked_tagnum(&G__GTracksDictLN_TH1D), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrackEta_lowPt",1700,G__GTracksDict_177_0_38, 85, G__get_linked_tagnum(&G__GTracksDictLN_TH1D), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrackPhi_lowPt",1707,G__GTracksDict_177_0_39, 85, G__get_linked_tagnum(&G__GTracksDictLN_TH1D), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrackEta_highPt",1778,G__GTracksDict_177_0_40, 85, G__get_linked_tagnum(&G__GTracksDictLN_TH1D), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrackPhi_highPt",1785,G__GTracksDict_177_0_41, 85, G__get_linked_tagnum(&G__GTracksDictLN_TH1D), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrack2DAll_PtEta",1761,G__GTracksDict_177_0_42, 85, G__get_linked_tagnum(&G__GTracksDictLN_TH2D), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrack2DAll_PtEta_fake",2263,G__GTracksDict_177_0_43, 85, G__get_linked_tagnum(&G__GTracksDictLN_TH2D), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetAllCuts",984,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PrintMessage",1234,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__GTracksDictLN_TString), -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'TString' - 0 - option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__GTracksDict_177_0_47, 85, G__get_linked_tagnum(&G__GTracksDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&GTracks::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GTracksDict_177_0_48, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GTracks::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GTracksDict_177_0_49, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&GTracks::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GTracksDict_177_0_50, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&GTracks::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GTracksDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GTracksDict_177_0_54, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GTracksDict_177_0_55, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GTracks::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GTracksDict_177_0_56, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&GTracks::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GTracksDict_177_0_57, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GTracks::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GTracksDict_177_0_58, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&GTracks::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("GTracks", 687, G__GTracksDict_177_0_59, (int) ('i'), G__get_linked_tagnum(&G__GTracksDictLN_GTracks), -1, 0, 1, 1, 1, 0, "u 'GTracks' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~GTracks", 813, G__GTracksDict_177_0_60, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GTracksDict_177_0_61, (int) ('u'), G__get_linked_tagnum(&G__GTracksDictLN_GTracks), -1, 1, 1, 1, 1, 0, "u 'GTracks' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncGTracksDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalGTracksDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcGTracksDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__GTracksDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__GTracksDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__GTracksDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__GTracksDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__GTracksDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__GTracksDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__GTracksDictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__GTracksDictLN_TClonesArray = { "TClonesArray" , 99 , -1 };
G__linked_taginfo G__GTracksDictLN_TH1D = { "TH1D" , 99 , -1 };
G__linked_taginfo G__GTracksDictLN_TH2D = { "TH2D" , 99 , -1 };
G__linked_taginfo G__GTracksDictLN_GTrack = { "GTrack" , 99 , -1 };
G__linked_taginfo G__GTracksDictLN_GPhysObj = { "GPhysObj" , 99 , -1 };
G__linked_taginfo G__GTracksDictLN_TFile = { "TFile" , 99 , -1 };
G__linked_taginfo G__GTracksDictLN_GTracks = { "GTracks" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableGTracksDict() {
  G__GTracksDictLN_TClass.tagnum = -1 ;
  G__GTracksDictLN_TBuffer.tagnum = -1 ;
  G__GTracksDictLN_TMemberInspector.tagnum = -1 ;
  G__GTracksDictLN_TObject.tagnum = -1 ;
  G__GTracksDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__GTracksDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__GTracksDictLN_TString.tagnum = -1 ;
  G__GTracksDictLN_TClonesArray.tagnum = -1 ;
  G__GTracksDictLN_TH1D.tagnum = -1 ;
  G__GTracksDictLN_TH2D.tagnum = -1 ;
  G__GTracksDictLN_GTrack.tagnum = -1 ;
  G__GTracksDictLN_GPhysObj.tagnum = -1 ;
  G__GTracksDictLN_TFile.tagnum = -1 ;
  G__GTracksDictLN_GTracks.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableGTracksDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__GTracksDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__GTracksDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__GTracksDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__GTracksDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__GTracksDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__GTracksDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__GTracksDictLN_TString);
   G__get_linked_tagnum_fwd(&G__GTracksDictLN_TClonesArray);
   G__get_linked_tagnum_fwd(&G__GTracksDictLN_TH1D);
   G__get_linked_tagnum_fwd(&G__GTracksDictLN_TH2D);
   G__get_linked_tagnum_fwd(&G__GTracksDictLN_GTrack);
   G__get_linked_tagnum_fwd(&G__GTracksDictLN_GPhysObj);
   G__get_linked_tagnum_fwd(&G__GTracksDictLN_TFile);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GTracksDictLN_GTracks),sizeof(GTracks),-1,29952,"Tracks Class for everything which is related only to tracks",G__setup_memvarGTracks,G__setup_memfuncGTracks);
}
extern "C" void G__cpp_setupGTracksDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupGTracksDict()");
  G__set_cpp_environmentGTracksDict();
  G__cpp_setup_tagtableGTracksDict();

  G__cpp_setup_inheritanceGTracksDict();

  G__cpp_setup_typetableGTracksDict();

  G__cpp_setup_memvarGTracksDict();

  G__cpp_setup_memfuncGTracksDict();
  G__cpp_setup_globalGTracksDict();
  G__cpp_setup_funcGTracksDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncGTracksDict();
  return;
}
class G__cpp_setup_initGTracksDict {
  public:
    G__cpp_setup_initGTracksDict() { G__add_setup_func("GTracksDict",(G__incsetup)(&G__cpp_setupGTracksDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initGTracksDict() { G__remove_setup_func("GTracksDict"); }
};
G__cpp_setup_initGTracksDict G__cpp_setup_initializerGTracksDict;

