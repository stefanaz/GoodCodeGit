//
// File generated by rootcint at Fri Oct 24 10:58:01 2014

// Do NOT change. Changes will be lost next time file is generated
//

#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "GMCVertexDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void GMCVertex_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_GMCVertex(void *p = 0);
   static void *newArray_GMCVertex(Long_t size, void *p);
   static void delete_GMCVertex(void *p);
   static void deleteArray_GMCVertex(void *p);
   static void destruct_GMCVertex(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::GMCVertex*)
   {
      ::GMCVertex *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::GMCVertex >(0);
      static ::ROOT::TGenericClassInfo 
         instance("GMCVertex", ::GMCVertex::Class_Version(), "/data/zenith234d/stefan/GoodCodeGit/libraries/GutLib/inc//GMCVertex.h", 16,
                  typeid(::GMCVertex), DefineBehavior(ptr, ptr),
                  &::GMCVertex::Dictionary, isa_proxy, 0,
                  sizeof(::GMCVertex) );
      instance.SetNew(&new_GMCVertex);
      instance.SetNewArray(&newArray_GMCVertex);
      instance.SetDelete(&delete_GMCVertex);
      instance.SetDeleteArray(&deleteArray_GMCVertex);
      instance.SetDestructor(&destruct_GMCVertex);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::GMCVertex*)
   {
      return GenerateInitInstanceLocal((::GMCVertex*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::GMCVertex*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *GMCVertex::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *GMCVertex::Class_Name()
{
   return "GMCVertex";
}

//______________________________________________________________________________
const char *GMCVertex::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::GMCVertex*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int GMCVertex::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::GMCVertex*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void GMCVertex::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::GMCVertex*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *GMCVertex::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::GMCVertex*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void GMCVertex::Streamer(TBuffer &R__b)
{
   // Stream an object of class GMCVertex.

   TVector3::Streamer(R__b);
}

//______________________________________________________________________________
void GMCVertex::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class GMCVertex.
      TClass *R__cl = ::GMCVertex::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fVertexID", &fVertexID);
      R__insp.Inspect(R__cl, R__parent, "fTime", &fTime);
      TVector3::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_GMCVertex(void *p) {
      return  p ? new(p) ::GMCVertex : new ::GMCVertex;
   }
   static void *newArray_GMCVertex(Long_t nElements, void *p) {
      return p ? new(p) ::GMCVertex[nElements] : new ::GMCVertex[nElements];
   }
   // Wrapper around operator delete
   static void delete_GMCVertex(void *p) {
      delete ((::GMCVertex*)p);
   }
   static void deleteArray_GMCVertex(void *p) {
      delete [] ((::GMCVertex*)p);
   }
   static void destruct_GMCVertex(void *p) {
      typedef ::GMCVertex current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::GMCVertex

/********************************************************
* /data/zenith234d/stefan/GoodCodeGit/libraries/GutLib/dict/GMCVertexDict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableGMCVertexDict();

extern "C" void G__set_cpp_environmentGMCVertexDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("/data/zenith234d/stefan/GoodCodeGit/libraries/GutLib/inc//GMCVertex.h");
  G__cpp_reset_tagtableGMCVertexDict();
}
#include <new>
extern "C" int G__cpp_dllrevGMCVertexDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* GMCVertex */
static int G__GMCVertexDict_202_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GMCVertex* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new GMCVertex[n];
     } else {
       p = new((void*) gvp) GMCVertex[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new GMCVertex;
     } else {
       p = new((void*) gvp) GMCVertex;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GMCVertexDictLN_GMCVertex));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GMCVertexDict_202_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GMCVertex* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 5
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new GMCVertex(
(Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]));
   } else {
     p = new((void*) gvp) GMCVertex(
(Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GMCVertexDictLN_GMCVertex));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GMCVertexDict_202_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((GMCVertex*) G__getstructoffset())->GetVertexID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GMCVertexDict_202_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((GMCVertex*) G__getstructoffset())->GetTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GMCVertexDict_202_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((GMCVertex*) G__getstructoffset())->PrintMessage(*((TString*) G__int(libp->para[0])));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GMCVertexDict_202_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((GMCVertex*) G__getstructoffset())->Print(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GMCVertexDict_202_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) GMCVertex::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GMCVertexDict_202_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GMCVertex::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GMCVertexDict_202_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) GMCVertex::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GMCVertexDict_202_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      GMCVertex::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GMCVertexDict_202_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GMCVertex*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GMCVertexDict_202_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GMCVertex::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GMCVertexDict_202_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) GMCVertex::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GMCVertexDict_202_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GMCVertex::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GMCVertexDict_202_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) GMCVertex::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GMCVertexDict_202_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   GMCVertex* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new GMCVertex(*(GMCVertex*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GMCVertexDictLN_GMCVertex));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef GMCVertex G__TGMCVertex;
static int G__GMCVertexDict_202_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (GMCVertex*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((GMCVertex*) (soff+(sizeof(GMCVertex)*i)))->~G__TGMCVertex();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (GMCVertex*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((GMCVertex*) (soff))->~G__TGMCVertex();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GMCVertexDict_202_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GMCVertex* dest = (GMCVertex*) G__getstructoffset();
   *dest = *(GMCVertex*) libp->para[0].ref;
   const GMCVertex& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* GMCVertex */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncGMCVertexDict {
 public:
  G__Sizep2memfuncGMCVertexDict(): p(&G__Sizep2memfuncGMCVertexDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncGMCVertexDict::*p)();
};

size_t G__get_sizep2memfuncGMCVertexDict()
{
  G__Sizep2memfuncGMCVertexDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceGMCVertexDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GMCVertexDictLN_GMCVertex))) {
     GMCVertex *G__Lderived;
     G__Lderived=(GMCVertex*)0x1000;
     {
       TVector3 *G__Lpbase=(TVector3*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GMCVertexDictLN_GMCVertex),G__get_linked_tagnum(&G__GMCVertexDictLN_TVector3),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GMCVertexDictLN_GMCVertex),G__get_linked_tagnum(&G__GMCVertexDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableGMCVertexDict() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<TSchemaHelper>",117,G__get_linked_tagnum(&G__GMCVertexDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__GMCVertexDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GMCVertexDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__GMCVertexDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GMCVertexDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__GMCVertexDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__GMCVertexDictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__GMCVertexDictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__GMCVertexDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__GMCVertexDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__GMCVertexDictLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__GMCVertexDictLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__GMCVertexDictLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__GMCVertexDictLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__GMCVertexDictLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__GMCVertexDictLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__GMCVertexDictLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__GMCVertexDictLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__GMCVertexDictLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__GMCVertexDictLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__GMCVertexDictLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__GMCVertexDictLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__GMCVertexDictLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__GMCVertexDictLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__GMCVertexDictLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__GMCVertexDictLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__GMCVertexDictLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* GMCVertex */
static void G__setup_memvarGMCVertex(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GMCVertexDictLN_GMCVertex));
   { GMCVertex *p; p=(GMCVertex*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fVertexID=",0,"vertex id");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTime=",0,"production time");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GMCVertexDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarGMCVertexDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncGMCVertex(void) {
   /* GMCVertex */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GMCVertexDictLN_GMCVertex));
   G__memfunc_setup("GMCVertex",853,G__GMCVertexDict_202_0_1, 105, G__get_linked_tagnum(&G__GMCVertexDictLN_GMCVertex), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GMCVertex",853,G__GMCVertexDict_202_0_2, 105, G__get_linked_tagnum(&G__GMCVertexDictLN_GMCVertex), -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - vertexid d - 'Double_t' 0 - x "
"d - 'Double_t' 0 - y d - 'Double_t' 0 - z "
"d - 'Double_t' 0 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVertexID",1067,G__GMCVertexDict_202_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTime",687,G__GMCVertexDict_202_0_4, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PrintMessage",1234,G__GMCVertexDict_202_0_5, 117, G__get_linked_tagnum(&G__GMCVertexDictLN_TString), -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,G__GMCVertexDict_202_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'TString' - 0 - option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__GMCVertexDict_202_0_7, 85, G__get_linked_tagnum(&G__GMCVertexDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&GMCVertex::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GMCVertexDict_202_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GMCVertex::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GMCVertexDict_202_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&GMCVertex::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GMCVertexDict_202_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&GMCVertex::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GMCVertexDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GMCVertexDict_202_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GMCVertexDict_202_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GMCVertex::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GMCVertexDict_202_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&GMCVertex::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GMCVertexDict_202_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GMCVertex::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GMCVertexDict_202_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&GMCVertex::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("GMCVertex", 853, G__GMCVertexDict_202_0_19, (int) ('i'), G__get_linked_tagnum(&G__GMCVertexDictLN_GMCVertex), -1, 0, 1, 1, 1, 0, "u 'GMCVertex' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~GMCVertex", 979, G__GMCVertexDict_202_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GMCVertexDict_202_0_21, (int) ('u'), G__get_linked_tagnum(&G__GMCVertexDictLN_GMCVertex), -1, 1, 1, 1, 1, 0, "u 'GMCVertex' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncGMCVertexDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalGMCVertexDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcGMCVertexDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__GMCVertexDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__GMCVertexDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__GMCVertexDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__GMCVertexDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__GMCVertexDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__GMCVertexDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__GMCVertexDictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__GMCVertexDictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__GMCVertexDictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__GMCVertexDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__GMCVertexDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__GMCVertexDictLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__GMCVertexDictLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__GMCVertexDictLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__GMCVertexDictLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__GMCVertexDictLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__GMCVertexDictLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__GMCVertexDictLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__GMCVertexDictLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__GMCVertexDictLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__GMCVertexDictLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__GMCVertexDictLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__GMCVertexDictLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__GMCVertexDictLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__GMCVertexDictLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__GMCVertexDictLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__GMCVertexDictLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__GMCVertexDictLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__GMCVertexDictLN_TVector3 = { "TVector3" , 99 , -1 };
G__linked_taginfo G__GMCVertexDictLN_GMCVertex = { "GMCVertex" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableGMCVertexDict() {
  G__GMCVertexDictLN_TClass.tagnum = -1 ;
  G__GMCVertexDictLN_TBuffer.tagnum = -1 ;
  G__GMCVertexDictLN_TMemberInspector.tagnum = -1 ;
  G__GMCVertexDictLN_TObject.tagnum = -1 ;
  G__GMCVertexDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__GMCVertexDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__GMCVertexDictLN_TString.tagnum = -1 ;
  G__GMCVertexDictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__GMCVertexDictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__GMCVertexDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__GMCVertexDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__GMCVertexDictLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__GMCVertexDictLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__GMCVertexDictLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__GMCVertexDictLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__GMCVertexDictLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__GMCVertexDictLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__GMCVertexDictLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__GMCVertexDictLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__GMCVertexDictLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__GMCVertexDictLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__GMCVertexDictLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__GMCVertexDictLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__GMCVertexDictLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__GMCVertexDictLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__GMCVertexDictLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__GMCVertexDictLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__GMCVertexDictLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__GMCVertexDictLN_TVector3.tagnum = -1 ;
  G__GMCVertexDictLN_GMCVertex.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableGMCVertexDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__GMCVertexDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__GMCVertexDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__GMCVertexDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__GMCVertexDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__GMCVertexDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__GMCVertexDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__GMCVertexDictLN_TString);
   G__get_linked_tagnum_fwd(&G__GMCVertexDictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__GMCVertexDictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__GMCVertexDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GMCVertexDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__GMCVertexDictLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GMCVertexDictLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GMCVertexDictLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GMCVertexDictLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GMCVertexDictLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GMCVertexDictLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GMCVertexDictLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GMCVertexDictLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GMCVertexDictLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GMCVertexDictLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GMCVertexDictLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GMCVertexDictLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GMCVertexDictLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__GMCVertexDictLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GMCVertexDictLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__GMCVertexDictLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GMCVertexDictLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__GMCVertexDictLN_TVector3);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GMCVertexDictLN_GMCVertex),sizeof(GMCVertex),-1,62720,"mc vertex class",G__setup_memvarGMCVertex,G__setup_memfuncGMCVertex);
}
extern "C" void G__cpp_setupGMCVertexDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupGMCVertexDict()");
  G__set_cpp_environmentGMCVertexDict();
  G__cpp_setup_tagtableGMCVertexDict();

  G__cpp_setup_inheritanceGMCVertexDict();

  G__cpp_setup_typetableGMCVertexDict();

  G__cpp_setup_memvarGMCVertexDict();

  G__cpp_setup_memfuncGMCVertexDict();
  G__cpp_setup_globalGMCVertexDict();
  G__cpp_setup_funcGMCVertexDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncGMCVertexDict();
  return;
}
class G__cpp_setup_initGMCVertexDict {
  public:
    G__cpp_setup_initGMCVertexDict() { G__add_setup_func("GMCVertexDict",(G__incsetup)(&G__cpp_setupGMCVertexDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initGMCVertexDict() { G__remove_setup_func("GMCVertexDict"); }
};
G__cpp_setup_initGMCVertexDict G__cpp_setup_initializerGMCVertexDict;

