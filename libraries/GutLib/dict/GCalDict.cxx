//
// File generated by rootcint at Fri Oct 24 10:57:57 2014

// Do NOT change. Changes will be lost next time file is generated
//

#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "GCalDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void GCal_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_GCal(void *p = 0);
   static void *newArray_GCal(Long_t size, void *p);
   static void delete_GCal(void *p);
   static void deleteArray_GCal(void *p);
   static void destruct_GCal(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::GCal*)
   {
      ::GCal *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::GCal >(0);
      static ::ROOT::TGenericClassInfo 
         instance("GCal", ::GCal::Class_Version(), "/data/zenith234d/stefan/GoodCodeGit/libraries/GutLib/inc//GCal.h", 16,
                  typeid(::GCal), DefineBehavior(ptr, ptr),
                  &::GCal::Dictionary, isa_proxy, 0,
                  sizeof(::GCal) );
      instance.SetNew(&new_GCal);
      instance.SetNewArray(&newArray_GCal);
      instance.SetDelete(&delete_GCal);
      instance.SetDeleteArray(&deleteArray_GCal);
      instance.SetDestructor(&destruct_GCal);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::GCal*)
   {
      return GenerateInitInstanceLocal((::GCal*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::GCal*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *GCal::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *GCal::Class_Name()
{
   return "GCal";
}

//______________________________________________________________________________
const char *GCal::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::GCal*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int GCal::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::GCal*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void GCal::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::GCal*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *GCal::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::GCal*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void GCal::Streamer(TBuffer &R__b)
{
   // Stream an object of class GCal.

   GPhysObj::Streamer(R__b);
}

//______________________________________________________________________________
void GCal::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class GCal.
      TClass *R__cl = ::GCal::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fEmpz", &fEmpz);
      R__insp.Inspect(R__cl, R__parent, "fPt", &fPt);
      R__insp.Inspect(R__cl, R__parent, "fYJB", &fYJB);
      R__insp.Inspect(R__cl, R__parent, "fPtOvEt", &fPtOvEt);
      R__insp.Inspect(R__cl, R__parent, "fETtocuton", &fETtocuton);
      R__insp.Inspect(R__cl, R__parent, "fYJBCut", &fYJBCut);
      R__insp.Inspect(R__cl, R__parent, "fETCut", &fETCut);
      R__insp.Inspect(R__cl, R__parent, "fPtOvEtCut", &fPtOvEtCut);
      R__insp.Inspect(R__cl, R__parent, "fTimeCut", &fTimeCut);
      R__insp.Inspect(R__cl, R__parent, "*fGeneralpx", &fGeneralpx);
      R__insp.Inspect(R__cl, R__parent, "*fGeneralpy", &fGeneralpy);
      R__insp.Inspect(R__cl, R__parent, "*fGeneralpz", &fGeneralpz);
      R__insp.Inspect(R__cl, R__parent, "*fGeneralE", &fGeneralE);
      R__insp.Inspect(R__cl, R__parent, "*fGeneralEt", &fGeneralEt);
      R__insp.Inspect(R__cl, R__parent, "*fGeneralEtex2ir", &fGeneralEtex2ir);
      R__insp.Inspect(R__cl, R__parent, "*fGeneralEtex2irOrange", &fGeneralEtex2irOrange);
      R__insp.Inspect(R__cl, R__parent, "*fGeneralEmpz", &fGeneralEmpz);
      R__insp.Inspect(R__cl, R__parent, "*fGeneralPt", &fGeneralPt);
      R__insp.Inspect(R__cl, R__parent, "*fGeneralPtOvEt", &fGeneralPtOvEt);
      R__insp.Inspect(R__cl, R__parent, "*fGeneralYJB", &fGeneralYJB);
      R__insp.Inspect(R__cl, R__parent, "*fGeneralYJBvsYTrue", &fGeneralYJBvsYTrue);
      R__insp.Inspect(R__cl, R__parent, "*fGeneralcal_tg", &fGeneralcal_tg);
      R__insp.Inspect(R__cl, R__parent, "*fGeneralYJB_uncut", &fGeneralYJB_uncut);
      R__insp.Inspect(R__cl, R__parent, "*fGeneralpx_uncut", &fGeneralpx_uncut);
      R__insp.Inspect(R__cl, R__parent, "*fGeneralpy_uncut", &fGeneralpy_uncut);
      R__insp.Inspect(R__cl, R__parent, "*fGeneralpz_uncut", &fGeneralpz_uncut);
      R__insp.Inspect(R__cl, R__parent, "*fGeneralE_uncut", &fGeneralE_uncut);
      R__insp.Inspect(R__cl, R__parent, "*fGeneralEt_uncut", &fGeneralEt_uncut);
      R__insp.Inspect(R__cl, R__parent, "*fGeneralEtex2ir_uncut", &fGeneralEtex2ir_uncut);
      R__insp.Inspect(R__cl, R__parent, "*fGeneralEtex2irOrange_uncut", &fGeneralEtex2irOrange_uncut);
      R__insp.Inspect(R__cl, R__parent, "*fGeneralEmpz_uncut", &fGeneralEmpz_uncut);
      R__insp.Inspect(R__cl, R__parent, "*fGeneralPt_uncut", &fGeneralPt_uncut);
      R__insp.Inspect(R__cl, R__parent, "*fGeneralPtOvEt_uncut", &fGeneralPtOvEt_uncut);
      R__insp.Inspect(R__cl, R__parent, "*fGeneralYJBvsYTrue_uncut", &fGeneralYJBvsYTrue_uncut);
      R__insp.Inspect(R__cl, R__parent, "*fGeneralcal_tg_uncut", &fGeneralcal_tg_uncut);
      R__insp.Inspect(R__cl, R__parent, "*fControlpx", &fControlpx);
      R__insp.Inspect(R__cl, R__parent, "*fControlpy", &fControlpy);
      R__insp.Inspect(R__cl, R__parent, "*fControlpz", &fControlpz);
      R__insp.Inspect(R__cl, R__parent, "*fControlE", &fControlE);
      R__insp.Inspect(R__cl, R__parent, "*fControlEt", &fControlEt);
      R__insp.Inspect(R__cl, R__parent, "*fControlEmpz", &fControlEmpz);
      R__insp.Inspect(R__cl, R__parent, "*fControlPt", &fControlPt);
      R__insp.Inspect(R__cl, R__parent, "*fControlPtOvEt", &fControlPtOvEt);
      R__insp.Inspect(R__cl, R__parent, "*fControlYJB", &fControlYJB);
      R__insp.Inspect(R__cl, R__parent, "*fControlTime", &fControlTime);
      R__insp.Inspect(R__cl, R__parent, "*fControlpx_uncut", &fControlpx_uncut);
      R__insp.Inspect(R__cl, R__parent, "*fControlpy_uncut", &fControlpy_uncut);
      R__insp.Inspect(R__cl, R__parent, "*fControlpz_uncut", &fControlpz_uncut);
      R__insp.Inspect(R__cl, R__parent, "*fControlE_uncut", &fControlE_uncut);
      R__insp.Inspect(R__cl, R__parent, "*fControlEt_uncut", &fControlEt_uncut);
      R__insp.Inspect(R__cl, R__parent, "*fControlEmpz_uncut", &fControlEmpz_uncut);
      R__insp.Inspect(R__cl, R__parent, "*fControlPt_uncut", &fControlPt_uncut);
      R__insp.Inspect(R__cl, R__parent, "*fControlPtOvEt_uncut", &fControlPtOvEt_uncut);
      R__insp.Inspect(R__cl, R__parent, "*fControlYJB_uncut", &fControlYJB_uncut);
      R__insp.Inspect(R__cl, R__parent, "*fControlTime_uncut", &fControlTime_uncut);
      GPhysObj::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_GCal(void *p) {
      return  p ? new(p) ::GCal : new ::GCal;
   }
   static void *newArray_GCal(Long_t nElements, void *p) {
      return p ? new(p) ::GCal[nElements] : new ::GCal[nElements];
   }
   // Wrapper around operator delete
   static void delete_GCal(void *p) {
      delete ((::GCal*)p);
   }
   static void deleteArray_GCal(void *p) {
      delete [] ((::GCal*)p);
   }
   static void destruct_GCal(void *p) {
      typedef ::GCal current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::GCal

/********************************************************
* /data/zenith234d/stefan/GoodCodeGit/libraries/GutLib/dict/GCalDict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableGCalDict();

extern "C" void G__set_cpp_environmentGCalDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("/data/zenith234d/stefan/GoodCodeGit/libraries/GutLib/inc//GCal.h");
  G__cpp_reset_tagtableGCalDict();
}
#include <new>
extern "C" int G__cpp_dllrevGCalDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* GCal */
static int G__GCalDict_164_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GCal* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new GCal[n];
     } else {
       p = new((void*) gvp) GCal[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new GCal;
     } else {
       p = new((void*) gvp) GCal;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GCalDictLN_GCal));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GCalDict_164_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((GCal*) G__getstructoffset())->Calc());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GCalDict_164_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((GCal*) G__getstructoffset())->CheckYJBCut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GCalDict_164_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((GCal*) G__getstructoffset())->CheckETCut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GCalDict_164_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((GCal*) G__getstructoffset())->CheckPtOvEtCut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GCalDict_164_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((GCal*) G__getstructoffset())->CheckTimeCut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GCalDict_164_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((GCal*) G__getstructoffset())->GetYJBCut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GCalDict_164_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((GCal*) G__getstructoffset())->GetETCut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GCalDict_164_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((GCal*) G__getstructoffset())->GetPtOvEtCut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GCalDict_164_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((GCal*) G__getstructoffset())->GetTimeCut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GCalDict_164_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((GCal*) G__getstructoffset())->GetEmpz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GCalDict_164_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((GCal*) G__getstructoffset())->GetETtocuton());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GCalDict_164_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) GCal::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GCalDict_164_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GCal::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GCalDict_164_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) GCal::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GCalDict_164_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      GCal::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GCalDict_164_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GCal*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GCalDict_164_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GCal::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GCalDict_164_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) GCal::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GCalDict_164_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GCal::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GCalDict_164_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) GCal::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GCalDict_164_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   GCal* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new GCal(*(GCal*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GCalDictLN_GCal));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef GCal G__TGCal;
static int G__GCalDict_164_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (GCal*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((GCal*) (soff+(sizeof(GCal)*i)))->~G__TGCal();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (GCal*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((GCal*) (soff))->~G__TGCal();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GCalDict_164_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GCal* dest = (GCal*) G__getstructoffset();
   *dest = *(GCal*) libp->para[0].ref;
   const GCal& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* GCal */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncGCalDict {
 public:
  G__Sizep2memfuncGCalDict(): p(&G__Sizep2memfuncGCalDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncGCalDict::*p)();
};

size_t G__get_sizep2memfuncGCalDict()
{
  G__Sizep2memfuncGCalDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceGCalDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GCalDictLN_GCal))) {
     GCal *G__Lderived;
     G__Lderived=(GCal*)0x1000;
     {
       GPhysObj *G__Lpbase=(GPhysObj*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GCalDictLN_GCal),G__get_linked_tagnum(&G__GCalDictLN_GPhysObj),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GCalDictLN_GCal),G__get_linked_tagnum(&G__GCalDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableGCalDict() {

   /* Setting up typedef entry */
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<TSchemaHelper>",117,G__get_linked_tagnum(&G__GCalDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__GCalDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GCalDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__GCalDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GCalDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__GCalDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* GCal */
static void G__setup_memvarGCal(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GCalDictLN_GCal));
   { GCal *p; p=(GCal*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fEmpz=",0,"E-p_z");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPt=",0,"p_t");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fYJB=",0,"y_jb");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPtOvEt=",0,"Pt/Et");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fETtocuton=",0,"proton splash + electron corrected cal_et");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fYJBCut=",0,"cut on y_jb");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fETCut=",0,"cut on E_T minus 2 inner rings");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fPtOvEtCut=",0,"cut on Pt/Et");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fTimeCut=",0,"cut on cal_tg");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GCalDictLN_TH1D),-1,-1,4,"fGeneralpx=",0,"cal x momentum");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GCalDictLN_TH1D),-1,-1,4,"fGeneralpy=",0,"cal y momentum");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GCalDictLN_TH1D),-1,-1,4,"fGeneralpz=",0,"cal z momentum");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GCalDictLN_TH1D),-1,-1,4,"fGeneralE=",0,"cal Energy");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GCalDictLN_TH1D),-1,-1,4,"fGeneralEt=",0,"cal transverse Energy");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GCalDictLN_TH1D),-1,-1,4,"fGeneralEtex2ir=",0,"cal transverse Energy minus et from 2 inner cal rings (self calculated)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GCalDictLN_TH1D),-1,-1,4,"fGeneralEtex2irOrange=",0,"cal transverse Energy minus et from 2 inner cal rings (calculated by orange)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GCalDictLN_TH1D),-1,-1,4,"fGeneralEmpz=",0,"cal E - p_z");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GCalDictLN_TH1D),-1,-1,4,"fGeneralPt=",0,"cal transvers momentum");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GCalDictLN_TH1D),-1,-1,4,"fGeneralPtOvEt=",0,"cal Pt/Et");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GCalDictLN_TH1D),-1,-1,4,"fGeneralYJB=",0,"y_jb distribution");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GCalDictLN_TH2D),-1,-1,4,"fGeneralYJBvsYTrue=",0,"YJB zufo vs. YTrue MC");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GCalDictLN_TH1D),-1,-1,4,"fGeneralcal_tg=",0,"cal timing");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GCalDictLN_TH1D),-1,-1,4,"fGeneralYJB_uncut=",0,"uncut y_jb distribution");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GCalDictLN_TH1D),-1,-1,4,"fGeneralpx_uncut=",0,"uncut cal x momentum");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GCalDictLN_TH1D),-1,-1,4,"fGeneralpy_uncut=",0,"uncut cal y momentum");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GCalDictLN_TH1D),-1,-1,4,"fGeneralpz_uncut=",0,"uncut cal z momentum");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GCalDictLN_TH1D),-1,-1,4,"fGeneralE_uncut=",0,"uncut cal Energy");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GCalDictLN_TH1D),-1,-1,4,"fGeneralEt_uncut=",0,"uncut cal transverse Energy");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GCalDictLN_TH1D),-1,-1,4,"fGeneralEtex2ir_uncut=",0,"uncut cal transverse Energy minus et from 2 inner cal rings (self calculated)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GCalDictLN_TH1D),-1,-1,4,"fGeneralEtex2irOrange_uncut=",0,"uncut cal transverse Energy minus et from 2 inner cal rings (calculated by orange)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GCalDictLN_TH1D),-1,-1,4,"fGeneralEmpz_uncut=",0,"uncut cal E - p_z");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GCalDictLN_TH1D),-1,-1,4,"fGeneralPt_uncut=",0,"uncut cal transvers momentum");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GCalDictLN_TH1D),-1,-1,4,"fGeneralPtOvEt_uncut=",0,"uncut cal Pt/Et");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GCalDictLN_TH2D),-1,-1,4,"fGeneralYJBvsYTrue_uncut=",0,"uncut YJB zufo vs. YTrue MC");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GCalDictLN_TH1D),-1,-1,4,"fGeneralcal_tg_uncut=",0,"uncut cal timing");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GCalDictLN_TH1D),-1,-1,4,"fControlpx=",0,"cal x momentum");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GCalDictLN_TH1D),-1,-1,4,"fControlpy=",0,"cal y momentum");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GCalDictLN_TH1D),-1,-1,4,"fControlpz=",0,"cal z momentum");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GCalDictLN_TH1D),-1,-1,4,"fControlE=",0,"cal Energy");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GCalDictLN_TH1D),-1,-1,4,"fControlEt=",0,"cal transverse energy minus 2 inner rings");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GCalDictLN_TH1D),-1,-1,4,"fControlEmpz=",0,"cal E - p_z");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GCalDictLN_TH1D),-1,-1,4,"fControlPt=",0,"cal transvers momentum");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GCalDictLN_TH1D),-1,-1,4,"fControlPtOvEt=",0,"cal Pt/Et");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GCalDictLN_TH1D),-1,-1,4,"fControlYJB=",0,"control y_jb distribution");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GCalDictLN_TH1D),-1,-1,4,"fControlTime=",0,"control cal_tg distribution");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GCalDictLN_TH1D),-1,-1,4,"fControlpx_uncut=",0,"uncut cal x momentum");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GCalDictLN_TH1D),-1,-1,4,"fControlpy_uncut=",0,"uncut cal y momentum");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GCalDictLN_TH1D),-1,-1,4,"fControlpz_uncut=",0,"uncut cal z momentum");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GCalDictLN_TH1D),-1,-1,4,"fControlE_uncut=",0,"uncut cal Energy");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GCalDictLN_TH1D),-1,-1,4,"fControlEt_uncut=",0,"uncut cal transverse energy minus 2 inner rings");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GCalDictLN_TH1D),-1,-1,4,"fControlEmpz_uncut=",0,"uncut cal E - p_z");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GCalDictLN_TH1D),-1,-1,4,"fControlPt_uncut=",0,"uncut cal transvers momentum");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GCalDictLN_TH1D),-1,-1,4,"fControlPtOvEt_uncut=",0,"uncut cal Pt/Et");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GCalDictLN_TH1D),-1,-1,4,"fControlYJB_uncut=",0,"uncut control y_jb distribution");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GCalDictLN_TH1D),-1,-1,4,"fControlTime_uncut=",0,"uncut control cal_tg distribution");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GCalDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarGCalDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncGCal(void) {
   /* GCal */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GCalDictLN_GCal));
   G__memfunc_setup("GCal",343,G__GCalDict_164_0_1, 105, G__get_linked_tagnum(&G__GCalDictLN_GCal), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateGeneral",1298,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CreateControl",1333,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FillGeneral",1093,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FillControl",1128,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Do",179,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Calc",371,G__GCalDict_164_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CheckYJBCut",1007,G__GCalDict_164_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CheckETCut",931,G__GCalDict_164_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CheckPtOvEtCut",1356,G__GCalDict_164_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CheckTimeCut",1177,G__GCalDict_164_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetYJBCut",817,G__GCalDict_164_0_12, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetETCut",741,G__GCalDict_164_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPtOvEtCut",1166,G__GCalDict_164_0_14, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTimeCut",987,G__GCalDict_164_0_15, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEmpz",700,G__GCalDict_164_0_16, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetETtocuton",1221,G__GCalDict_164_0_17, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Reset",515,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetAllCuts",984,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PrintMessage",1234,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__GCalDictLN_TString), -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'TString' - 0 - option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__GCalDict_164_0_22, 85, G__get_linked_tagnum(&G__GCalDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&GCal::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GCalDict_164_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GCal::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GCalDict_164_0_24, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&GCal::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GCalDict_164_0_25, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&GCal::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GCalDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GCalDict_164_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GCalDict_164_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GCal::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GCalDict_164_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&GCal::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GCalDict_164_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GCal::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GCalDict_164_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&GCal::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("GCal", 343, G__GCalDict_164_0_34, (int) ('i'), G__get_linked_tagnum(&G__GCalDictLN_GCal), -1, 0, 1, 1, 1, 0, "u 'GCal' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~GCal", 469, G__GCalDict_164_0_35, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GCalDict_164_0_36, (int) ('u'), G__get_linked_tagnum(&G__GCalDictLN_GCal), -1, 1, 1, 1, 1, 0, "u 'GCal' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncGCalDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalGCalDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcGCalDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__GCalDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__GCalDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__GCalDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__GCalDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__GCalDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__GCalDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__GCalDictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__GCalDictLN_TH1D = { "TH1D" , 99 , -1 };
G__linked_taginfo G__GCalDictLN_TH2D = { "TH2D" , 99 , -1 };
G__linked_taginfo G__GCalDictLN_GPhysObj = { "GPhysObj" , 99 , -1 };
G__linked_taginfo G__GCalDictLN_GCal = { "GCal" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableGCalDict() {
  G__GCalDictLN_TClass.tagnum = -1 ;
  G__GCalDictLN_TBuffer.tagnum = -1 ;
  G__GCalDictLN_TMemberInspector.tagnum = -1 ;
  G__GCalDictLN_TObject.tagnum = -1 ;
  G__GCalDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__GCalDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__GCalDictLN_TString.tagnum = -1 ;
  G__GCalDictLN_TH1D.tagnum = -1 ;
  G__GCalDictLN_TH2D.tagnum = -1 ;
  G__GCalDictLN_GPhysObj.tagnum = -1 ;
  G__GCalDictLN_GCal.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableGCalDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__GCalDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__GCalDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__GCalDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__GCalDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__GCalDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__GCalDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__GCalDictLN_TString);
   G__get_linked_tagnum_fwd(&G__GCalDictLN_TH1D);
   G__get_linked_tagnum_fwd(&G__GCalDictLN_TH2D);
   G__get_linked_tagnum_fwd(&G__GCalDictLN_GPhysObj);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GCalDictLN_GCal),sizeof(GCal),-1,29952,"Cal class for everything which is related only to CAL",G__setup_memvarGCal,G__setup_memfuncGCal);
}
extern "C" void G__cpp_setupGCalDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupGCalDict()");
  G__set_cpp_environmentGCalDict();
  G__cpp_setup_tagtableGCalDict();

  G__cpp_setup_inheritanceGCalDict();

  G__cpp_setup_typetableGCalDict();

  G__cpp_setup_memvarGCalDict();

  G__cpp_setup_memfuncGCalDict();
  G__cpp_setup_globalGCalDict();
  G__cpp_setup_funcGCalDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncGCalDict();
  return;
}
class G__cpp_setup_initGCalDict {
  public:
    G__cpp_setup_initGCalDict() { G__add_setup_func("GCalDict",(G__incsetup)(&G__cpp_setupGCalDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initGCalDict() { G__remove_setup_func("GCalDict"); }
};
G__cpp_setup_initGCalDict G__cpp_setup_initializerGCalDict;

