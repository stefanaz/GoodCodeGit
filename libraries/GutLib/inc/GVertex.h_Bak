//
// GVertex.h
//
// $Author: meyer $
// $Date: 2005/08/30 11:13:30 $
// $Revision: 1.11 $
//

#ifndef GUT_GVertex
#define GUT_GVertex

#ifndef GUT_GPhysObj
#include <GPhysObj.h>
#endif

class GBeamSpot;

class GVertex : public GPhysObj {

 private:

  Bool_t        fZCut;                    // vertex passes z cut
  Bool_t        fXCut;                    // x vertex passes cut to be different than the nominal vertex
  Bool_t        fYCut;                    // y vertex passes cut to be different than the nominal vertex
  Bool_t        fXYCut;                   // vertex passes cut to have a maximal distance from the nominal vertex in the xy plane
  Bool_t        fBeamSpotCut;             // event has beam spot

  // uncut control histograms
  TH1D         *fControlX_uncut;          // uncut vertex x position
  TH1D         *fControlY_uncut;          // uncut vertex y position
  TH1D         *fControlZ_uncut;          // uncut vertex z position
  TH1D         *fControlXY_uncut;         // uncut vertex xy position

  TH1D         *fControlXMCTRUE_uncut;    // uncut vertex x position MC true info
  TH1D         *fControlYMCTRUE_uncut;    // uncut vertex y position MC true info
  TH1D         *fControlZMCTRUE_uncut;    // uncut vertex z position MC true info

  // control histograms
  TH1D         *fControlX;                // vertex x position
  TH1D         *fControlY;                // vertex y position
  TH1D         *fControlZ;                // vertex z position
  TH1D         *fControlXY;               // vertex xy position

  TH1D         *fControlXMCTRUE;          // vertex x position MC true info
  TH1D         *fControlYMCTRUE;          // vertex y position MC true info
  TH1D         *fControlZMCTRUE;          // vertex z position MC true info

  // uncut general histograms
  TH1D         *fGeneralX_uncut;          // uncut vertex x position
  TH1D         *fGeneralY_uncut;          // uncut vertex y position
  TH1D         *fGeneralZ_uncut;          // uncut vertex z position

  TH1D         *fGeneralXMCTRUE_uncut;    // uncut vertex x position MC true info
  TH1D         *fGeneralYMCTRUE_uncut;    // uncut vertex y position MC true info
  TH1D         *fGeneralZMCTRUE_uncut;    // uncut vertex z position MC true info

  // general histograms
  TH1D         *fGeneralX;                // vertex x position
  TH1D         *fGeneralY;                // vertex y position
  TH1D         *fGeneralZ;                // vertex z position

  TH1D         *fGeneralXMCTRUE;          // vertex x position MC true info
  TH1D         *fGeneralYMCTRUE;          // vertex y position MC true info
  TH1D         *fGeneralZMCTRUE;          // vertex z position MC true info

  // beamspot array
  TClonesArray *fBeamSpots;               // array of beamspots
  Int_t         fNBeamSpots;              // number of beam spots

  // beamspot variables
  GBeamSpot    *fCurrentBeamSpot;         // current data beamspot object
  GBeamSpot    *fEventBeamSpot;         // current event beamspot object
  GBeamSpot    *fMCBeamSpot;              // MC beamspot object
  GBeamSpot    *fLastValidBeamSpot;        // last valid beamspot, to use all mvd take runs

  Int_t         fNoBeamSpotRunnr;         // runnr in case that no beamspot for this run was found

 public:
  GVertex();
  virtual ~GVertex();

  virtual Bool_t CreateControl();
  virtual Bool_t FillControl();

  virtual Bool_t CreateGeneral();
  virtual Bool_t FillGeneral();

  virtual Bool_t Do();

  virtual Bool_t Reset();

  virtual Bool_t GetAllCuts();

  virtual Bool_t CheckZCut();
  virtual Bool_t CheckXCut();
  virtual Bool_t CheckYCut();
  virtual Bool_t CheckXYCut();
  virtual Bool_t CheckBeamSpotCut();

  TString PrintMessage(TString option);
  virtual Bool_t Print(TString option);

  inline virtual Bool_t     GetZCut()                { return fZCut;            }
  inline virtual Bool_t     GetXCut()                { return fXCut;            }
  inline virtual Bool_t     GetYCut()                { return fYCut;            }
  inline virtual Bool_t     GetXYCut()               { return fXYCut;           }
  inline virtual Bool_t     GetBeamSpotCut()         { return fBeamSpotCut;     }
  virtual GBeamSpot* GetCurrentBeamSpot();

  virtual GBeamSpot* CheckCurrentBeamSpot();
  virtual GBeamSpot* CheckEventBeamSpot();  
  virtual GBeamSpot* GetEventBeamSpot();  
  virtual Bool_t InitBeamSpotList();

  ClassDef(GVertex,0) // Vertex Class for everything which is related only to Vertices
};

R__EXTERN GVertex *gVertex;

#endif
